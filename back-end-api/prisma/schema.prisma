generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// Program & Donation
// -----------------------------
model Program {
  id                 Int        @id @default(autoincrement())
  title              String     @db.VarChar(255)
  content            String?
  collected_donation Int?
  donation_target    Int?
  start_date         DateTime?
  end_date           DateTime?
  remaining_days     Int?
  category_program   String?    @db.VarChar(100)
  payment_method_id  String?    @db.VarChar(100)
  image              String?    @db.VarChar(255)

  donations   Donation[]
  articles    Article[]
  testimonials Testimonial[]
}

model Donation {
  id            Int      @id @default(autoincrement())
  campaign_id   Int
  donor_id      Int
  donation_date DateTime?
  description   String?  @db.VarChar(100)
  amount        Int

  program Program @relation(fields: [campaign_id], references: [id])
  donor   Donor   @relation(fields: [donor_id], references: [id])
}

model Donor {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  email        String?  @db.VarChar(100)
  phone_number String?  @db.VarChar(20)

  donations Donation[]
}

// -----------------------------
// Article
// -----------------------------
model Article {
  id          String   @id
  title       String
  date        DateTime?
  time        DateTime?
  content     String
  program_id  Int
  category_id String

  program   Program         @relation(fields: [program_id], references: [id])
  category  ArticleCategory @relation(fields: [category_id], references: [id])
}

model ArticleCategory {
  id            String    @id
  category_name String?
  articles      Article[]
}

// -----------------------------
// Testimonial
// -----------------------------
model Testimonial {
  id         String   @id
  name       String?
  date       DateTime?
  time       DateTime?
  content    String
  type_id    String
  program_id Int

  type    TestimonialType @relation(fields: [type_id], references: [id])
  program Program         @relation(fields: [program_id], references: [id])
}

model TestimonialType {
  id        String         @id
  type_name String?
  testimonials Testimonial[]
}

// -----------------------------
// Qurban
// -----------------------------
model QurbanProgram {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  context        String?
  image_url      String?   @db.VarChar(255)
  video_url      String?   @db.VarChar(255)
  status         String    @db.VarChar(20) // active, expired, draft
  created_at     DateTime?
  updated_at     DateTime?
  program_id     Int?
  expired_date   DateTime?
  target_mustahik Int?
  target_lokasi   Int?
  target_pequrban Int?

  stats   QurbanStats[]
  gallery QurbanGallery[]
  donors  QurbanDonor[]
}

model QurbanStats {
  id            Int           @id @default(autoincrement())
  program_id    Int
  jumlah_pequrban Int?
  total_donasi  BigInt?
  target_donasi BigInt?

  program QurbanProgram @relation(fields: [program_id], references: [id])
}

model QurbanGallery {
  id        Int           @id @default(autoincrement())
  program_id Int
  image_url String?       @db.VarChar(255)

  program QurbanProgram @relation(fields: [program_id], references: [id])
}

model QurbanDonor {
  id               Int     @id @default(autoincrement())
  program_id       Int
  nama             String  @db.VarChar(100)
  no_hp            String? @db.VarChar(20)
  alamat           String?
  jenis_hewan      String  @db.VarChar(20) // Sapi, Kambing, Domba
  jumlah           Int
  harga            BigInt
  metode_pembayaran String  @db.VarChar(50) // Transfer Bank, E-Wallet, Tunai
  status_pembayaran String  @db.VarChar(20) // pending, paid, failed
  created_at       DateTime?
  updated_at       DateTime?

  program QurbanProgram @relation(fields: [program_id], references: [id])
}

// -----------------------------
// Bank
// -----------------------------
model BankAccount {
  id_account_category Int
  id_bank             Int
  name_recipient      String?
  account_number      String?
  bank_name           String?

  @@id([id_account_category, id_bank])
}

// -----------------------------
// Audit System
// -----------------------------
model Organisasi {
  organisasi_id Int           @id @default(autoincrement())
  nama_organisasi String?

  laporan_audit LaporanAudit[]
}

model Auditor {
  auditor_id Int            @id @default(autoincrement())
  nama_auditor String?

  laporan_audit LaporanAudit[]
}

model StatusAudit {
  status_id   Int           @id @default(autoincrement())
  nama_status String?
  laporan_audit LaporanAudit[]
}

model LaporanAudit {
  laporan_id     Int       @id @default(autoincrement())
  tahun_audit    Int?
  nama_laporan   String?
  status_id      Int
  auditor_id     Int
  organisasi_id  Int

  organisasi Organisasi @relation(fields: [organisasi_id], references: [organisasi_id])
  auditor    Auditor    @relation(fields: [auditor_id], references: [auditor_id])
  status     StatusAudit @relation(fields: [status_id], references: [status_id])
  dokumen    DokumenLaporan[]
}

model DokumenLaporan {
  dokumen_id   Int    @id @default(autoincrement())
  laporan_id   Int
  jenis_dokumen String?
  link_dokumen  String?

  laporan LaporanAudit @relation(fields: [laporan_id], references: [laporan_id])
}

// -----------------------------
// Payment Method
// -----------------------------
model PaymentMethod {
  id          Int     @id @default(autoincrement())
  nama        String?
  code        Int?
  payment_type String?
  description  String?
  logo_url     String?
  is_active    String?
}
